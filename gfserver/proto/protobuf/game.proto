option java_package = "game.protocol.protobuf";
option java_outer_classname = "GameProtocol";
option optimize_for = SPEED;

message S_CReqCmd_Ack {
	required string cmd    = 1;
}

message C_Heartbeat {
}

message I_KickoutRole {
	required string roleId  	= 1;
	optional int32 reasonCode 	= 2; 
}

message S_ErrorInfo {
	required int32 errorCode  = 1;
	optional string parameter = 2; 
}

message S_Exception {
	required int32 code  		= 1;
	optional string description = 2; 
	optional string trace 		= 3; 
}

message S_HintInfo {
	optional int32 hintCode 	= 1;
	optional string parameter 	= 2; 
}

message S_SystemNotification { 
	required int32 type  		= 1;
	required string content   	= 2;
}

message I_RouteMessage {
	required string targetServerTag 			= 1;
	required bool isRandomServer 				= 2; 
	required string msgName    	    			= 3;
	required bytes  msgContent      			= 4;
	required string originalFromServerUniqueTag = 5;
	required string finalRouteToRoleId     		= 6;
	repeated string backupFinalRouteToRoleId	= 7; 
}

message I_RegisterClient {
	required string clientType     = 1;
	required string clientUniqueId = 2;
	optional string serverIp       = 3;
	optional string serverPort     = 4;
	optional string reserved       = 5;
}

message C_GetLoginServerInfo {
}

message S_LoginServerInfo {
	required string ipAddress = 1;
	required int32 port = 2;
}

message C_RoleLogin {
	required string login_account_id = 1;   // android device id, apple game center id, or binded email id etc
	required string device_id = 2;   // 设备mac地址
	required string platform = 3;    // 渠道名称
	optional int32 channel = 4;      // 所在平台: 0.android 1.ios
	optional string account = 5;     // 用户账号
	optional string token = 6;       // 登录令牌
	optional string reserve = 7;     // 预留字段，用于应用宝等特殊登录
	optional string device_info = 8; // 设备信息 
	optional string sdk_info = 9;    // 渠道sdk信息
}

message S_RoleData {
	required string roleId = 1;
	repeated RoleOwnItem item = 2;
}

message RoleOwnItem {
	required int32 itemId = 1;
	required int32 value = 2; 
	optional int32 level = 3; 
	repeated StringKeyParameter parameter = 4;
}

message StringKeyParameter {
	required string key = 1;
	required string value = 2; 
}

message IntKeyParameter {
	required int32 key = 1;
	required string value = 2; 
}

message C_GetSignReward {
	required int32 day = 1;
}

message OwnItemNotification {
	required RoleOwnItem item = 1;
	
	enum ItemChangeType {
        Add = 0;
        Sub = 1;
        Set = 2;
        Del = 3;
    }
	required ItemChangeType changeType = 2;
}

message S_BatchOwnItemNotification {
	repeated OwnItemNotification notification = 1;
}

message C_UpLevelItem { //<==S_BatchOwnItemNotification
	required int32 itemId  		 = 1;
	required int32 currentLevel  = 2;
}

message S_EstimateTime { // seems not used now
	required int32 time    = 1;
	optional int32 itemId  = 2;
	//need reason type?
}

message OperItem {
	required int32 itemId  		= 1;
	required int32 level  		= 2;
	optional int32 count  		= 3;
}

//maybe need to switch to other cases
message C_UseItem { //<==S_BatchOwnItemNotification
	required OperItem item  = 1;
}

message C_SwitchJoinInBattleArmyId { //<==S_BatchOwnItemNotification
	required int32 armyId  = 1;
}

message C_JoinInBattleArmy { //<==S_BatchOwnItemNotification
	required int32 armyId  = 1;
	required int32 itemId  = 2;
}

message C_JoinOutBattleArmy { //<==S_BatchOwnItemNotification
	required int32 armyId  = 1;
	required int32 itemId  = 2;
}

message C_JoinInBattleHero { //<==S_BatchOwnItemNotification
	required int32 armyId  = 1;
	required int32 itemId  = 2;
}

message C_JoinOutBattleHero { //<==S_BatchOwnItemNotification
	required int32 armyId  = 1;
	required int32 itemId  = 2;
}

message C_ChangeSetting { //<==S_BatchOwnItemNotification
	required int32 itemId  = 1;
	required int32 value   = 2;
}

message C_ShopBuy { //<==S_BatchOwnItemNotification
	required int32 shopItemId  = 1;
}

message C_CreateAlliance {
	required string name  			= 1;
	required int32 joinType  		= 2;
	optional int32 joinNeedPrize  	= 3;
	optional string description 	= 4;
	optional int32 location 		= 5;
	optional int32 fightRate 		= 6;
	optional int32 publicFightLog 	= 7;
}

message S_AllianceEvent {
	required string allianceId  			= 1;
	required string eventId  				= 2;
	required int32 allianceEventType   		= 3;
	required string time  					= 4;
	optional AllianceEventParameters parameters = 5;
}

message S_AllianceNotification {
	repeated S_AllianceEvent allianceEvent			  = 1;
	repeated S_AllianceMemberInfoUpdate memberUpdate  = 2;
	optional NetAllianceDetailInfo allianceUpdate  	  = 3;
}

message AllianceEventParameters {
	repeated IntKeyParameter parameter 		= 1;
}

message C_JoinAlliance {
	required string allianceId  = 1;
}

message C_ApproveJoinInAlliance {
	required string roleId  	= 1;
	required string allianceId  = 2;
	required string eventId		= 3;
}

message C_RejectJoinInAlliance {
	required string roleId  	= 1;
	required string allianceId  = 2;
	required string eventId		= 3;
}

message C_UpAllianceMemberTitle {
	required string candidateRoleId  	= 1;
}

message C_DownAllianceMemberTitle {
	required string candidateRoleId  	= 1;
}

message C_ChangeAllianceLeader {
	required string candidateRoleId  	= 1;
}

message C_KickoutAllianceMember {
	required string candidateRoleId  	= 1;
}

message C_LeaveAlliance {
	required string allianceId  = 1;
}

message C_FavoriteAlliance {
	required string allianceId  = 1;
}

message C_GetAllianceDetail {
	required string allianceId  = 1;
}

message S_GetAllianceDetail {
	required NetAllianceDetailInfo alliance  = 1;
}

message NetAllianceDetailInfo {
	required string allianceId  	= 1;
	required string name  			= 2;
	required int32 joinType  		= 3;
	optional int32 joinNeedPrize  	= 4;
	optional string description 	= 5;
	optional int32 location 		= 6;
	optional int32 fightRate 		= 7;
	optional int32 publicFightLog 	= 8;
	optional string logo 			= 9;
	optional int32 consecutiveWin 	= 10;
	repeated NetAllianceMemberInfo member = 11;
}

message NetAllianceMemberInfo {
	required string roleId  		= 1;
	required string roleName  		= 2;
	required int32 roleLevel 		= 3;
	required int32 title  			= 4;
	optional int32 point  			= 5;
	optional int32 recentDonated 	= 6;
	optional int32 recentRequested 	= 7;
}

message S_AllianceMemberInfoUpdate {
	repeated NetAllianceMemberInfo member   = 1;
}

message C_RequestAllianceDonation {
	optional string helpContent   = 1;
}

message C_DoAlliaceDonation {
	required string reqReinforceEventId = 1;
	required int32 itemId  				= 2;
	required int32 count   				= 3;
}

message C_AskAllianceHelp {
}

message C_DoAllianceHelp {
}

message C_SearchAlliance {
	required string name  			= 1;
	optional int32 joinType  		= 2;
	optional int32 joinNeedPrize  	= 3;
	optional int32 onlyJoinable   	= 4;
	optional int32 location 		= 5;
	optional int32 fightRate 		= 6;
	optional int32 level 			= 7; // not use 
	optional int32 maxMember 		= 8;
}

message C_GetRecommendAlliances {
}

message S_GetRecommendAlliances {
	repeated AllianceShortInfo alliance = 1;
}

message S_SearchAlliance {
	repeated AllianceShortInfo alliance = 1;
}

message AllianceShortInfo {
	required string name  			= 1;
	required int32 memberSize  		= 2;
	required int32 maxMemberSize   	= 3;
	optional int32 points 			= 4;
	optional int32 level  			= 5;
	optional string logo  			= 6;
}

message C_GetPlayerMoreInfo { // in alliance to show info
	required string playerId  = 1;
}

message C_GetPlayerBaseCityInfo {  // go to player base check all info
	required string playerId  = 1;
}


message C_SendChatMessage { 
	required int32 chatGroup  = 1;
	required string content   = 2;
}

message S_ChatMessage {  
	required string roleId 			= 1;
	required string roleName 		= 2;
	required int32 chatGroup  		= 3;
	required string content   		= 4;
	optional int32 prize 	  		= 5;
	optional int32 allianceTitle 	= 6;
	optional string headIcon 		= 7;
}

message C_AskAsFriend {  
	required string targetFriendRoleId 	= 1;
	optional string askDescription 		= 2;
}

message C_MakeAsFriend {  
	required string targetFriendRoleId 	= 1;
}

message C_FollowRole {  
	required string targetRoleId 		= 1;
}

message C_UnFollowRole {  
	required string targetRoleId 		= 1;
}

message C_SendEmail { 
	required string targetRoleId  = 1;
	required string content   	  = 2;
}

message C_SendAllianceAllEmail { 
	required string content   	  = 1;
}

